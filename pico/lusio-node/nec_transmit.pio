

.program nec_transmit

.define NUM_CYCLES 31               ; how many carrier cycles to generate
.define public TICKS_PER_LOOP 4

.wrap_target

; We'll shift in a bit sequence, and for each bit we'll do one of two things:
; for a high bit, emit NUM_CYCLES of carrier
; for a low bit, do not emit anything for (TICKS_PER_LOOP * NUM_CYCLES) total time

out Y, 1
; jmp Y emit_high

; emit_high:
; set X, (NUM_CYCLES - 1) 
; set pins, 1         ; set the pin high (1 cycle)
; set pins, 0 [1]     ; set the pin low (2 cycles)
; jmp X--, cycle_loop             ; (1 more cycle)
.wrap

% c-sdk {
#include "hardware/clocks.h"

void nec_transmit_program_init(PIO pio, uint sm, uint offset, uint emit_pin, float freq) {
    // initialize the emitter pin
    pio_gpio_init(pio, emit_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, emit_pin, 1, true);

    pio_sm_config c = nec_transmit_program_get_default_config(offset);
    sm_config_set_set_pins(&c, emit_pin, 1);

    float div = clock_get_hz(clk_sys) / (freq * nec_transmit_TICKS_PER_LOOP);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);

    pio_sm_set_enabled(pio, sm, true);

    printf("Ran nec_transmit_program_init with pin %d. Clock freq is %d.\n", emit_pin, clock_get_hz(clk_sys));
}
%}


